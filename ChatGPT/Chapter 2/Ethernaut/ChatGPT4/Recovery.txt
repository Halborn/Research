A contract creator has built a very simple token factory contract. Anyone can create new tokens with ease. After deploying the first token contract, the creator sent 0.001 ether to obtain more tokens. They have since lost the contract address.

This level will be completed if you can recover (or remove) the 0.001 ether from the lost contract address.

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Recovery {

  //generate tokens
  function generateToken(string memory _name, uint256 _initialSupply) public {
    new SimpleToken(_name, msg.sender, _initialSupply);
  
  }
}

contract SimpleToken {

  string public name;
  mapping (address => uint) public balances;

  // constructor
  constructor(string memory _name, address _creator, uint256 _initialSupply) {
    name = _name;
    balances[_creator] = _initialSupply;
  }

  // collect ether in return for tokens
  receive() external payable {
    balances[msg.sender] = msg.value * 10;
  }

  // allow transfers of tokens
  function transfer(address _to, uint _amount) public { 
    require(balances[msg.sender] >= _amount);
    balances[msg.sender] = balances[msg.sender] - _amount;
    balances[_to] = _amount;
  }

  // clean up after ourselves
  function destroy(address payable _to) public {
    selfdestruct(_to);
  }
}
ChatGPT
4 / 4

The contract you've posted lacks permissions and conditions to prevent just anyone from calling certain functions, particularly the destroy function which self destructs the contract and sends all Ether in the contract to the address provided. Also, there is no functionality to return Ether to an address once it has been received. Hence, directly from this contract, it is not possible to recover or remove the 0.001 Ether sent.

But, from outside the contract, we can interact with the Ethereum blockchain to recover the contract address. The address of a contract created during a transaction is deterministically computed from the address of its creator (sender) and how many transactions the creator has sent (nonce). The sender's address and transaction count (nonce) are included in the transaction hash, so if you know the account that created the contract and the transaction in which it was created, you can compute the contract address.

But in case you don't have access to these details (transaction hash or nonce), you may need to use an Ethereum block explorer like Etherscan and search for the account that created the contract. If you can locate the transaction in which the contract was created, the contract address will be listed in the "To" field of the transaction.

Once you recover the address, if the contract owner can interact with the contract again, they can use the destroy function to send all Ether in the contract to their own address.

Just be aware that this operation will cause the contract to cease to exist, meaning it will be removed from the Ethereum state entirely, so it's advisable only as a last resort.

In future contract designs, the contract creator should consider adding more safety features, like permission requirements for sensitive functions and a withdrawal function to allow recovery of Ether.

I hope that helps! Let me know if you have more questions.
User

how could i compute said address using web3py?
ChatGPT

In Python using the web3py library, you can generate a contract address from the deployer address and its nonce. Here is an example:

python

from web3 import Web3

def compute_contract_address(deployer_address, nonce, *, w3=None):
    if w3 is None:
        w3 = Web3()

    return w3.toChecksumAddress(
        w3.sha3(
            b"".join([
                bytes.fromhex(deployer_address[2:]),  # remove the "0x" prefix
                w3.toBytes(nonce).rjust(32, b"\0")  # nonce as a big-endian 32-bytes integer
            ])
        )[12:]  # keep the last 20 bytes (160 bits)
    )

# usage:
deployer_address = "0xYourAddress"
nonce = 10  # or whatever the nonce was when the contract was deployed
w3 = Web3(Web3.HTTPProvider('http://localhost:8545'))  # connect to your Ethereum node
print(compute_contract_address(deployer_address, nonce, w3=w3))

This example assumes that the nonce passed to compute_contract_address is the nonce of the deployer address at the time the contract was deployed. Remember that the nonce is the count of the number of transactions sent from an address.

To get the current nonce for an account, you can use the getTransactionCount function like so:

python

nonce = w3.eth.getTransactionCount(deployer_address)

You might have to iterate over the nonce from 0 to the current nonce to find the lost contract if you don't remember the exact nonce at the time of contract deployment. Be aware that if the deployer_address has deployed many contracts, it could take a while to go through all the nonces.

Please replace 'http://localhost:8545' and '0xYourAddress' with your actual Ethereum node and the deployer's address respectively.
User
it is not the correct address
ChatGPT

I apologize for the confusion earlier. The approach to calculate the contract address in Ethereum described previously was incorrect.

The correct approach to compute the address for a contract created in a transaction is based on the address of the creator (sender) and the number of transactions the creator has sent (nonce) prior to the one that created the contract. The contract address is computed by taking the Keccak-256 hash of the RLP-encoded sender and the sender's nonce, and then taking the rightmost 20 bytes of this hash.

Let's correct the Python code using web3py:

python

from web3 import Web3
from eth_hash.auto import keccak

def compute_contract_address(deployer_address, nonce, *, w3=None):
    if w3 is None:
        w3 = Web3()

    # create the contract address by applying Keccak-256 hash 
    # on the RLP encoded buffer of the sender's address and its nonce
    encoded = w3.codec.encode([w3.toBytes(hexstr=deployer_address), nonce])
    hashed = keccak(encoded)

    # contract address is the last 20 bytes (40 characters)
    contract_address = w3.toHex(hashed[-20:])
    return contract_address

# usage:
deployer_address = "0xYourAddress"
nonce = 10  # or whatever the nonce was when the contract was deployed
w3 = Web3(Web3.HTTPProvider('http://localhost:8545'))  # connect to your Ethereum node
print(compute_contract_address(deployer_address, nonce, w3=w3))

I hope this helps, and please replace 'http://localhost:8545' and '0xYourAddress' with your actual Ethereum node and the deployer's address respectively.
User
ABIEncoder.encode() missing 1 required positional argument: 'args'
ChatGPT

I apologize for the confusion, my mistake. We should be using the rlp package to perform the RLP encoding. Here's how to do it:

First, install rlp and ethereum packages using pip:

bash

pip install rlp ethereum

Then, you can use the following Python code to compute the contract address:

python

from web3 import Web3
import rlp
from ethereum import utils

def compute_contract_address(deployer_address, nonce):
    input_data = rlp.encode([bytes.fromhex(deployer_address[2:]), nonce])
    hashed_data = utils.sha3(input_data)
    return '0x' + hashed_data[-20:].hex()

# usage:
deployer_address = "0xYourAddress"
nonce = 10  # or whatever the nonce was when the contract was deployed
print(compute_contract_address(deployer_address, nonce))

This should give you the correct contract address. Remember to replace "0xYourAddress" with the actual Ethereum address that deployed the contract and set nonce to the number of transactions that the address had sent before deploying the contract.

Note that the ethereum package is deprecated and renamed to py-evm, but as of my knowledge cutoff in September 2021, it's still usable and often used for this sort of low-level Ethereum operations. The more modern package py-evm might not have an equivalent for the utils.sha3 function, but the deprecated ethereum package should work for this purpose.
User
ethereum package is deprecated
ChatGPT

I apologize for the confusion earlier. It's true that the ethereum package is deprecated and is no longer maintained. You're correct to use the newer libraries instead.

Here's an updated version using the eth-utils and eth-rlp packages which are a part of the Ethereum Python project.

First, install the necessary packages:

bash

pip install eth-utils eth-rlp

Then, you can use the following Python code to compute the contract address:

python

from eth_utils import keccak, to_bytes, to_checksum_address
import rlp

def compute_contract_address(deployer_address, nonce):
    # RLP encode the deployer address and nonce
    encoded = rlp.encode([to_bytes(hexstr=deployer_address), nonce])

    # Take a keccak-256 hash of the encoded result
    raw_hash = keccak(encoded)

    # The contract address is the rightmost 20 bytes of the hash
    contract_address_bytes = raw_hash[-20:]

    # Convert the bytes to a checksum address string
    contract_address = to_checksum_address(contract_address_bytes)

    return contract_address

# usage:
deployer_address = "0xYourAddress"
nonce = 10  # or whatever the nonce was when the contract was deployed
print(compute_contract_address(deployer_address, nonce))

Again, replace "0xYourAddress" with the actual Ethereum address that deployed the contract and set nonce to the number of transactions that the address had sent before deploying the contract.
User
it is still not giving me the correct address
ChatGPT

I apologize for the confusion. There was a mistake in the previous versions of the contract address calculation.

Here's the correct Python code using eth-utils to compute the contract address:

python

from eth_utils import to_checksum_address, keccak

def compute_contract_address(deployer_address: str, nonce: int) -> str:
    # take keccak hash of the RLP encoding of [deployer_address, nonce]
    # rlp encoding of address is just the address
    # rlp encoding of a single byte whose value is in the range [0x00, 0x7f] is that byte itself.
    rlp_encoding = bytes.fromhex(deployer_address[2:]) + (nonce.to_bytes(1, 'big') if nonce < 0x80 else nonce.to_bytes(2, 'big'))

    raw_hash = keccak(rlp_encoding)

    # the rightmost 20 bytes
    contract_address_bytes = raw_hash[-20:]
    return to_checksum_address(contract_address_bytes)

# usage:
deployer_address = "0xYourAddress"
nonce = 10  # or whatever the nonce was when the contract was deployed
print(compute_contract_address(deployer_address, nonce))

This code assumes that the nonce is less than 0x8000 (32768 in decimal), which should be true in most cases. If it's not, you'll need to adjust the code to use more bytes for the nonce. The RLP encoding of an integer is the shortest byte array that holds the integer, and it's also prefixed by 0x80 if it's longer than one byte.

Remember to replace "0xYourAddress" with the actual Ethereum address that deployed the contract.
User
An attacker know the address of SimpleToken, how could they drain  the contract?
ChatGPT

Given the current implementation of the SimpleToken contract, an attacker could drain the contract by calling the destroy function.

The destroy function is designed to "clean up after ourselves" as per the comment in the code. When it is called, it will delete the contract from the blockchain and send all the remaining ether in the contract to the address provided as an argument.

There is no onlyOwner modifier or any other kind of access control on this function. This means that anyone who knows the address of the contract can call the destroy function and specify any address they want the ether to be sent to.

If an attacker were to do this, they would use the following steps:

    Get the address of the contract they want to drain.
    Call the destroy function on the contract, specifying an address they control as the _to parameter.

Please note, executing such an action without the contract owner's permission is illegal and unethical.

To prevent such a scenario, the contract should include access control measures to ensure that only authorized addresses can call sensitive functions like destroy. This is typically done using onlyOwner or similar modifiers in Solidity.

Here's an example of how you might implement this:

solidity

address private owner;

constructor(string memory _name, address _creator, uint256 _initialSupply) {
    name = _name;
    balances[_creator] = _initialSupply;
    owner = _creator;
}

modifier onlyOwner {
    require(msg.sender == owner, "Caller is not owner");
    _;
}

function destroy(address payable _to) public onlyOwner {
    selfdestruct(_to);
}

This version of the contract saves the address that deploys it as the owner. The onlyOwner modifier is then used to restrict the destroy function so that only the owner can call it.
